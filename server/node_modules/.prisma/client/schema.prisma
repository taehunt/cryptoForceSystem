generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  username     String @unique
  passwordHash String
  role         String
}

model Config {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String @unique
  value String
}

model Transaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  amount    Float
  status    String
  createdAt DateTime @default(now())
}

model User {
  /// UUID 문자열 ID (ObjectId 아님)
  id                String           @id @default(uuid()) @map("_id")
  email             String           @unique
  passwordHash      String
  walletAddress     String?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime         @default(now())
  wallet            Json?
  defaultWalletType String?
  paymentRequests   PaymentRequest[]
}

model Merchant {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  walletPrivateKey String
  walletAddress    String
  description      String
  tokenAddress     String
  paymentRequests  PaymentRequest[] @relation("MerchantToPayments")
  createdAt        DateTime         @default(now())
}

model PaymentRequest {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String
  merchantId String  @db.ObjectId
  chain      String?

  amountBase     BigInt?
  decimals       Int?
  depositAddress String  @map("walletAddress")
  clientTxHash   String? @map("txHash")

  token      String
  amount     Float?
  status     String    @default("pending")
  createdAt  DateTime  @default(now())
  approvedAt DateTime?

  user     User     @relation(fields: [userId], references: [id])
  merchant Merchant @relation(fields: [merchantId], references: [id], name: "MerchantToPayments")

  @@index([merchantId, status, createdAt])
  @@index([depositAddress])
}

model Settlement {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  paymentRequestId String   @unique @db.ObjectId
  merchantId       String   @db.ObjectId
  grossCryptoBase  BigInt
  fxRatePpm        Int
  grossKRW         Int
  feeCryptoBase    BigInt
  feeKRW           Int
  status           String   @default("PENDING")
  exchangeOrderId  String?
  bankPayoutRef    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model BankAccount {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  merchantId String    @unique @db.ObjectId
  bankCode   String
  accountNo  String
  holderName String
  verifiedAt DateTime?
}

model LedgerEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  refType   String
  refId     String
  account   String
  currency  String
  amount    BigInt
  createdAt DateTime @default(now())

  @@index([refType, refId])
  @@index([account, currency, createdAt])
}
